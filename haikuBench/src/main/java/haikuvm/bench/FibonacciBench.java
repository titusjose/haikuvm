package haikuvm.bench;
public class FibonacciBench {
	static int fib(int n) {
		if (n < 2)
			return 1;
		else
			return fib(n - 2) + fib(n - 1);
	}

	/**
	 * java 1.6 hotspot
1:	438 <= 438 <= 438
2:	437 <= 437 <= 438
3:	422 <= 432 <= 438
4:	422 <= 433 <= 438
5:	422 <= 434 <= 438
6:	422 <= 432 <= 438
7:	422 <= 433 <= 438
8:	422 <= 431 <= 438
9:	422 <= 432 <= 438
10:	422 <= 432 <= 438
11:	422 <= 431 <= 438
12:	422 <= 432 <= 438
13:	421 <= 431 <= 438
14:	421 <= 431 <= 438
15:	421 <= 432 <= 438
16:	421 <= 431 <= 438
17:	421 <= 432 <= 438
18:	421 <= 432 <= 438
19:	421 <= 431 <= 438
20:	421 <= 432 <= 438
21:	421 <= 431 <= 438
22:	421 <= 431 <= 438
23:	421 <= 432 <= 438
24:	421 <= 431 <= 438
25:	421 <= 431 <= 438
26:	421 <= 432 <= 438
27:	421 <= 431 <= 438
28:	421 <= 431 <= 438
29:	421 <= 432 <= 438
30:	421 <= 431 <= 438
31:	421 <= 431 <= 438
32:	421 <= 431 <= 438
33:	421 <= 431 <= 438
34:	421 <= 432 <= 438
35:	421 <= 431 <= 438
36:	421 <= 431 <= 438
37:	421 <= 431 <= 438
38:	421 <= 431 <= 438
39:	421 <= 435 <= 594
40:	421 <= 440 <= 609
41:	421 <= 443 <= 609
42:	421 <= 447 <= 609
43:	421 <= 450 <= 609
44:	421 <= 454 <= 609
45:	421 <= 457 <= 609
46:	421 <= 460 <= 609
47:	421 <= 462 <= 609
48:	421 <= 461 <= 609
49:	421 <= 461 <= 609
50:	421 <= 460 <= 609

java 1.6 -Xint
1:	4937 <= 4937 <= 4937
2:	4937 <= 4937 <= 4938
3:	4937 <= 5369 <= 6234
4:	4937 <= 5629 <= 6407
5:	4937 <= 5787 <= 6421
6:	4937 <= 5890 <= 6421
7:	4937 <= 5957 <= 6421
8:	4937 <= 6005 <= 6421
9:	4937 <= 6045 <= 6421
10:	4937 <= 6078 <= 6421

haikuVM 32_64 -Ox align=1 (r57)
1:      7735 <= 7735 <= 7735
2:      7735 <= 8703 <= 9672
3:      7735 <= 8927 <= 9672
4:      7735 <= 9117 <= 9687
5:      7735 <= 9200 <= 9687
6:      7735 <= 9242 <= 9687
7:      7735 <= 9301 <= 9687
8:      7735 <= 9318 <= 9687
9:      7735 <= 9364 <= 9735
10:     7735 <= 9365 <= 9735
11:     7735 <= 9451 <= 10312

	 * @param args
	 */
	public static void main(String[] args) {
		long min=100000, max=0, sum=0;
		for (int n = 1; ; n++) {
			long t0=System.currentTimeMillis();
			for (int i = 0; i <= 35; i++) {
				fib(i);
			}
			long dt=System.currentTimeMillis()-t0;
			if (min>dt) min=dt;
			if (max<dt) max=dt;
			sum+=dt;
			System.out.println(n+":\t"+min+" <= "+(sum/n)+" <= " + max);
		}

	}
}
