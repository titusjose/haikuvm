# Configuration

Config = arduino

aliases.for.Mode = (HAIKU_16_16 16/16) (HAIKU_16_32 16/32) (HAIKU_32_64 32/64) (HAIKU_32_32 32/32)
aliases.for.Char = (HAIKU_CHAR_8 HAIKU_CHAR_1 1 8) (HAIKU_CHAR_16 HAIKU_CHAR_2 2 16)
aliases.for.Target = (atmega328p ATmega328p ATmega328P) (atmega8) (atmega16) (atmega32) (atmega32u4) (ubuntu) (X86) (arduinoIDE)
aliases.for.GC = (HAIKU_NoGC) (HAIKU_StopTheWorldGC) (HAIKU_IncrementalGC)


root4c.Extends = root
root4c.MemorySize = 300000
root4c.InitialMainThreadStackSize = 500
root4c.InitialOtherThreadStackSize = 100
root4c.Mode = 32/64
root4c.Char = 16
root4c.GC = HAIKU_StopTheWorldGC
# IncrementalGCSlice is only used if GC=HAIKU_IncrementalGC
root4c.IncrementalGCSlice = 10
root4c.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | VirtualMachineError | ArrayIndexOutOfBoundsException | StackOverflowError | ArithmeticException
root4c.PanicSupport = 1
root4c.Extension = .undefined Extension
# relative to HAIKUVM_HOME/target/<Config>/
root4c.VM_BASE = ../../HaikuVM
# relative to HAIKUVM_HOME/
root4c.HAIKUVM4C = ./haikuVM
root4c.Output = $(HAIKU_APP_NAME)$(HAIKU_EXTENSION)
root4c.CFLAGS = 
root4c.CLIBS = 
root4c.CXX_OPT = ${HAIKU_CC_OPT} 
root4c.LDFLAGS = 
root4c.LINKER = $(HAIKU_CXX) 
root4c.MillisPrescale = 64 
root4c.MillisDividend = 
root4c.MillisDivisor = 

#
# Windows (tested with ms vc5)
#
pc.Extends = root4c
pc.Target = X86
pc.CC = cl
pc.CXX = cl
pc.LINKER = link
pc.MicroKernel = haiku.pc.lib.HaikuMicroKernel
pc.Extension = 
#debug 
pc.CC_OPT = -DWIN32 -Zp1 -W3 -MD -Fo"$@" -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c "$<"
#release 
#pc.CC_OPT = -DWIN32 -Zp1 -W3 -MT -Ox -Fo"$@" -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c "$<"
pc.LDFLAGS = -OUT:"$(HAIKU_APP_NAME)".exe $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS)  
pc.Upload = $(HAIKU_APP_NAME) 

# pc16 as extension to pc to debug arduino images closely 
pc16.InitialMainThreadStackSize = 142
pc16.InitialOtherThreadStackSize = 45
pc16.MemorySize = 30000
pc16.Mode = 16/32
pc16.Char = 8
pc16.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | VirtualMachineError
pc16.PanicSupport = 0
pc16.Extends = pc

# WIN32 as synonym for pc but without internal exceptions 
WIN32.PanicSupport = 0
WIN32.Extends = pc

#
# Unix with gcc
#
unix.Extends = root4c
unix.Target = ubuntu
unix.CC = gcc
unix.CXX = g++
unix.MicroKernel = haiku.pc.lib.HaikuMicroKernel
unix.Extension =
#debug 
unix.CC_OPT  = -DUNIX -O0 -g3 -Wall -fmessage-length=0 -fpack-struct=1 -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c -o"$@" "$<"
#release 
#unix.CC_OPT = -DUNIX -O3     -Wall -fmessage-length=0 -fpack-struct=1 -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c -o"$@" "$<"
unix.LDFLAGS = -Wl,-Map,$(HAIKU_APP_NAME).map -Wl,--gc-sections -o"$(HAIKU_APP_NAME)" -lc -lm $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) $(LIBS)
#Don't upload. Just start direct. 
unix.Upload = ./$(HAIKU_APP_NAME)

linux32.Extends = unix

linux64.Extends = unix


#
# cygwin
# 1) With java sdk on windows
#   Open cygwin shell and call with windows pathes and bat-files (but unix slashes)
#   C:/haikuVM/bin/haiku.bat -v --Config cygwin -classpath "C:/haikuVM/examples/src/main/java/;C:/haikuVM/haikuBench/src/main/java" C:/haikuVM/examples/src/main/java/arduino/tutorial/HelloWorldJava.java
#
# 2) With java sdk on cygwin
# ???
#
cygwin.Extends = unix

junit.cygwin.Extends = unix
junit.cygwin.Upload = ./$(HAIKU_APP_NAME) | tee result.txt
junit.cygwin.MemorySize = 3000
junit.cygwin.Mode = 16/32
junit.cygwin.Char = 8
junit.cygwin.InitialMainThreadStackSize = 142
junit.cygwin.InitialOtherThreadStackSize = 45
junit.cygwin.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | VirtualMachineError
junit.cygwin.PanicSupport = 0

#
# minimal AVR configuration
#
avr.Extends = root4c
avr.Target = atmega8
avr.MemorySize = (RAMEND-0x100) - 300
avr.Clock = 8000000
avr.TimerInterrupt = TIMER0_OVF_vect
avr.InitialMainThreadStackSize = 142
avr.InitialOtherThreadStackSize = 45
avr.Mode = 16/32
avr.Char = 8
avr.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | VirtualMachineError | ArithmeticException
avr.PanicSupport = 0
avr.CC = avr-gcc
avr.CXX = avr-g++
avr.LINKER = avr-g++
avr.CC_OPT  = $(HAIKU_CFLAGS) -Wall -Os -fpack-struct -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -ffunction-sections -fdata-sections -mmcu=$(HAIKU_TARGET) -DF_CPU=$(HAIKU_CLOCK)UL -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c -o"$@" "$<"
avr.CXX_OPT = $(HAIKU_CFLAGS) -Wall -Os -fpack-struct -fshort-enums            -funsigned-char -funsigned-bitfields -ffunction-sections -fdata-sections -mmcu=$(HAIKU_TARGET) -DF_CPU=$(HAIKU_CLOCK)UL -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c -o"$@" "$<"
avr.LDFLAGS = -Wl,-Map,$(HAIKU_APP_NAME).map -Wl,--gc-sections -mmcu=$(HAIKU_TARGET) -o"$(HAIKU_APP_NAME).elf" -lc -lm $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) $(LIBS) 
#avr.CLIBS = -lc
avr.Extension = .hex
avr.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
# a lot of \ are needed just to get the following:
# avrdude -pm328p -cstk500v1 -P\\\.\\com17 -b57600 -Uflash:w:SimpleThreading.hex:a
# ugly but works:
avr.Port = \\\\\\.\\com17
avr.Upload = avrdude -p $(HAIKU_TARGET) -c stk500v1 -P $(HAIKU_PORT) -b 57600 -U flash:w:$(HAIKU_OUTPUT)

#
# ARDUINO wiring: setup(); loop();
#
wiring.Extends = avr
wiring.Target = atmega328p
wiring.Clock = 16000000
wiring.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel

#
# ARDUINO: main(); init(); 57600 baud; System.in/out
# 
#
duemilanove.Extends = avr
duemilanove.Target = atmega328p
duemilanove.Clock = 16000000
duemilanove.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx
#duemilanove.MicroKernel = haiku.pc.lib.HaikuMicroKernel

duemilanove.UsingCLIB.Extends = duemilanove
duemilanove.UsingCLIB.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelProcessing
duemilanove.UsingCLIB.CFLAGS = -I"${HAIKU_HOME}/lib/includes/arduino/cores/arduino" -I"${HAIKU_HOME}/lib/includes/arduino/variants/standard"
duemilanove.UsingCLIB.CLIBS = -L"${HAIKU_HOME}/lib/clibs" -lduemilanove_atmega328 -lc
duemilanove.UsingCLIB.TimerInterrupt = undef

duemilanove.ProcessingCLIB.Extends = duemilanove.UsingCLIB
duemilanove.ProcessingCLIB.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelProcessing

arduinoIDE.Extends = avr
arduinoIDE.Extension = 
arduinoIDE.Target = arduinoIDE
arduinoIDE.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDE
arduinoIDE.Upload = @echo 'Please use Arduino IDE for compile and upload: File->Examples->HaikuVM->HaikuVM' 
arduinoIDE.CC = @echo Please use Arduino IDE for compile step
arduinoIDE.CXX = @echo Please use Arduino IDE for compile step
arduinoIDE.LINKER = NONE
arduinoIDE.TimerInterrupt = undef
arduinoIDE.CC_OPT = undef
arduinoIDE.CFLAGS = undef
arduinoIDE.CLIBS = undef
arduinoIDE.CXX_OPT = undef
arduinoIDE.Clock = undef
arduinoIDE.LDFLAGS = undef
arduinoIDE.MemorySize = undef
arduinoIDE.MillisDividend = undef
arduinoIDE.MillisDivisor = undef
arduinoIDE.MillisPrescale = undef
arduinoIDE.Port = undef
arduinoIDE.UserMain = justDefined

arduinoIDE4Attiny.Extends = arduinoIDE
arduinoIDE4Attiny.MemorySize = 90
arduinoIDE4Attiny.InitialMainThreadStackSize = 21
arduinoIDE4Attiny.InitialOtherThreadStackSize = 10
arduinoIDE4Attiny.GC = HAIKU_NoGC
arduinoIDE4Attiny.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4TinyArduinoIDE
arduinoIDE4Attiny.PanicExceptions = 0x0
arduinoIDE4Attiny.PanicSupport = 0


#
# Default for ARDUINO is Duemilanove
# (because I own one)
#
mytarget.Extends = arduino
arduino.Extends = duemilanove

#
# ASURO Retro
#
# A little ASURO retro feeling. Here JAVA is very close to programming with C and ASURO lib 2.8.0rc1.
#
# Caution: 
# - Don't forget to call Init() in main(..)!
# - No System.out.println(..)!! Instead PrintInt(..), PrintLong(..), SerPrint(..) etc. from ASURO lib!
asuro.Extends = avr
asuro.Target = atmega8
asuro.Clock = 8000000
asuro.Upload = cmd /c start ASUROFlash155
asuro.MicroKernel = haiku.avr.lib.asuro.lib2_8_0_rc1.HaikuMicroKernel
asuro.PanicExceptions = 0
asuro.AsuroTiming = 1
asuro.TimerInterrupt = SIG_OVERFLOW2

#
# ASURO NanoVM
#
nanovm.Extends = asuro
nanovm.MicroKernel = haiku.avr.lib.asuro.nanovm.HaikuMicroKernel

# NIBObee
nibobee.Extends = avr
nibobee.Target = atmega16
nibobee.Clock = 15000000
nibobee.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
nibobee.Upload = NIBObeeProgrammer.exe 

#
# simple010 Configuration
#
simple010.Extends = avr
simple010.Target = atmega328p
simple010.Clock = 16000000
simple010.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
simple010.Upload = avrdude -p $(HAIKU_TARGET) -c stk500v1 -P $(HAIKU_PORT) -b 57600 -U flash:w:$(HAIKU_OUTPUT)

#
# Gertboard Configuration
#
# More info on the Gertboard can be found here:
# https://projects.drogon.net/raspberry-pi/gertboard/
#
gertboard.Extends = avr
gertboard.Target = atmega328p
gertboard.Clock = 12000000
gertboard.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx
gertboard.Port = gpio
gertboard.Upload = avrdude -p atmega328p -c $(HAIKU_PORT) -v -U flash:w:$(HAIKU_OUTPUT)

#
# leonardo Configuration
#
leonardo.Extends = avr
leonardo.Target = atmega32u4
# leonardo has 2.5k of SRAM so I use (a defensive amount of) 2000 bytes for JAVA
leonardo.Clock = 16000000
leonardo.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
leonardo.Upload = avrdude -p $(HAIKU_TARGET) -c avr109 -patmega32u4 -P $(HAIKU_PORT) -b57600 -U flash:w:$(HAIKU_OUTPUT)
leonardo.Port = com5

leonardo.UsingCLIB.Extends = leonardo
leonardo.UsingCLIB.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelProcessing
leonardo.UsingCLIB.CFLAGS = -I"${HAIKU_HOME}/lib/includes/arduino/cores/arduino" -I"${HAIKU_HOME}/lib/includes/arduino/variants/leonardo"
leonardo.UsingCLIB.CLIBS = -L"${HAIKU_HOME}/lib/clibs" -lleonardo -lc
leonardo.UsingCLIB.TimerInterrupt = undef

#
# Change myboard to your Arduino board
#
#myboard.Extends = leonardo.UsingCLIB 
myboard.Extends = duemilanove  